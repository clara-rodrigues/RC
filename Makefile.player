# Compiler
CXX = g++

# Compiler flags
CXXFLAGS = -std=c++17 -Wall -Wextra

# Root directory
SRC_DIR = player

# Find all .cpp files in the source directory
SRC_FILES = $(shell find $(SRC_DIR) -name '*.cpp')

# Object files for each executable
OBJ_FILES1 = $(patsubst %.cpp, %.player1.o, $(SRC_FILES))
OBJ_FILES2 = $(patsubst %.cpp, %.player2.o, $(SRC_FILES))

# Output executable names
OUTPUT1 = player1
OUTPUT2 = player2

# Default target: build both executables
all: $(OUTPUT1) $(OUTPUT2)

# Rule to create the first executable
$(OUTPUT1): $(OBJ_FILES1)
	$(CXX) $(CXXFLAGS) -o $@ $^

# Rule to create the second executable
$(OUTPUT2): $(OBJ_FILES2)
	$(CXX) $(CXXFLAGS) -o $@ $^

# Rule to compile .cpp files into .o files for the first executable
%.player1.o: %.cpp
	$(CXX) $(CXXFLAGS) -c $< -o $@

# Rule to compile .cpp files into .o files for the second executable
%.player2.o: %.cpp
	$(CXX) $(CXXFLAGS) -c $< -o $@

# Clean up build files
clean:
	rm -f $(OBJ_FILES1) $(OBJ_FILES2) $(OUTPUT1) $(OUTPUT2)
